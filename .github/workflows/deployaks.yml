name: AKS-and-deploy

on:
  push:
    branches:
      - main
permissions:
      id-token: write
      contents: read
      pages: write
env:
   TF_WORKING_DIR: ./AKS_Terraform
  #  TF_WORKING_DIR_deploy: ./AKS_Terraform/deployment
jobs:
  terraform:
    name: Terraform AKS Deployment
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          auth-type: service_principal

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.9.0
          
      - name: Terraform Init
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform init

      - name: Terraform Plan
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform apply -auto-approve tfplan

      # - name: Terraform Init
      #   run: terraform init

      # - name: Terraform Plan
      #   run: terraform plan -out=tfplan

      # - name: Terraform Apply
      #   run: terraform apply -auto-approve tfplan

  deploy:
  name: Deploy to AKS
  needs: terraform
  runs-on: ubuntu-latest
  permissions:
    id-token: write
    contents: read
    pages: write
  env:
    # default manifest path in your repo (change if different)
    TF_WORKING_DIR_deploy: ./AKS_Terraform/deployment

  steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Azure Login
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        auth-type: service_principal

    - name: Install kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Validate & list deployment folder
      run: |
        set -euo pipefail
        DEPLOY_PATH="${GITHUB_WORKSPACE}/${TF_WORKING_DIR_deploy#./}"
        echo "Checking deployment path: $DEPLOY_PATH"
        if [ ! -e "$DEPLOY_PATH" ]; then
          echo "::error::Deployment path does not exist: $DEPLOY_PATH"
          echo "Contents of repo root for debugging:"
          ls -la "${GITHUB_WORKSPACE}" || true
          exit 1
        fi
        echo "Deployment path exists â€” listing contents:"
        ls -la "$DEPLOY_PATH" || true

    - name: Get AKS credentials
      run: |
        set -euo pipefail
        # Replace these with terraform outputs if you prefer:
        # az aks get-credentials -g ${{ needs.terraform.outputs.resource_group }} -n ${{ needs.terraform.outputs.aks_name }} --overwrite-existing
        az aks get-credentials -g demo-aks-rg -n demo-aks-aks --overwrite-existing

    - name: Apply Kubernetes manifests (with retries)
      run: |
        set -euo pipefail
        DEPLOY_PATH="${GITHUB_WORKSPACE}/${TF_WORKING_DIR_deploy#./}"
        echo "Applying manifests from: $DEPLOY_PATH"
        attempts=0
        until [ $attempts -ge 3 ]
        do
          kubectl apply -f "$DEPLOY_PATH" --recursive && break
          attempts=$((attempts+1))
          echo "kubectl apply failed (attempt $attempts). Retrying in $((attempts*5))s..."
          sleep $((attempts*5))
        done
        if [ $attempts -ge 3 ]; then
          echo "::error::kubectl apply failed after retries"
          kubectl -n kube-system get pods --no-headers || true
          exit 1
        fi
        echo "kubectl apply succeeded"
